# -*- coding: utf-8 -*-
"""sam_mask_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEeLU3HSKc3fcg7CY9zLXjT5ZttlxH90
"""

#For colab
"""
!pip install \
'git+https://github.com/facebookresearch/segment-anything.git'
!pip install -q roboflow supervision
!wget -q \
'https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth'
"""

import torch
from segment_anything import SamPredictor, sam_model_registry
from PIL import Image
import os
import cv2
from matplotlib import pyplot as plt
import random
import matplotlib.pyplot as plt
import numpy as np
from segment_anything import SamAutomaticMaskGenerator

DEVICE = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
MODEL_TYPE = "vit_b"

sam = sam_model_registry[MODEL_TYPE](checkpoint="sam_vit_b_01ec64.pth")
sam.to(DEVICE)


images = []
images_names = []
for file in os.listdir("./fibras_low_res"):
    if file.endswith(".jpg"):
        images_names.append(str(file))
        image_bgr = cv2.imread(os.path.join("./fibras_low_res/", file))
        image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)
        images.append(image_rgb)



fig, axs = plt.subplots(1, 3, figsize=(15, 5))
for i in range(3):
    axs[i].imshow(np.array(images[random.randint(0, len(images))]))
    axs[i].axis("off")



mask_generator = SamAutomaticMaskGenerator(sam)

for i,img in enumerate(images):
  img.to(DEVICE)
  mask = mask_generator.generate(img)
  n_mask = len(mask)
  for n in range(n_mask):
    cv2.imwrite("./masks/mask_{}_{}.png".format(images_names[i],n), mask[n]['segmentation'].astype(int)*255)